#-*- coding:utf-8 -*-
"""mark_lsnum1.py
"""
import sys,re,codecs

class Lnum(object):
 def __init__(self,line):
  line = line.rstrip('\r\n')
  parts = line.split('\t')  # tab-delimited
  self.ilinestr,self.meta,self.ls = parts
  self.iline = int(self.ilinestr)
  
  
def init_lsnums(filein):
 with codecs.open(filein,"r","utf-8") as f:
  recs = [Lnum(x) for x in f]
 print(len(recs),'numeric ls read from',filein)
 # git dictionary based on iline. Take into account 'duplicates'
 d = {}
 for rec in recs:
  iline = rec.iline
  if iline not in d:
   d[iline] = []
  d[iline].append(rec)
 return recs,d

def mark_lsnums(lines,lsnums): 
 newlines = []
 for line in lines:
  newlines.append(line)
 # revise newlines based on lsnums
 for rec in lsnums:
  iline = rec.iline
  ls = rec.ls
  old = newlines[iline]
  #new = old.replace(ls,'**'+ls+'**')
  new = old.replace(ls,'**'+ls)
  new1 = new.replace('**<ls>','<ls n="">')
  newlines[iline] = new1
  if False: # dbg
   print('iline=%s, ls=%s' % (iline,ls))
   print('old:%s' % old)
   print()
   print('new:%s' % new)
   exit(1)
 return newlines

if __name__=="__main__":
 filein = sys.argv[1] #  xxx.txt (path to digitization of xxx)
 filelnum = sys.argv[2] # lsunknown file generated by lsextract_all
 fileout = sys.argv[3] # marked revision of xxx.txt
 
 lsnums,dlsnums = init_lsnums(filelnum)
 with codecs.open(filein,"r","utf-8") as f:
  lines = [x.rstrip('\r\n') for x in f]
 newlines = mark_lsnums(lines,lsnums)
 # write newlines
 with codecs.open(fileout,"w","utf-8") as f:
  for out in newlines:
   f.write(out+'\n')
 print(len(newlines),"lines written to",fileout)

 
